name: CI

on:
  push:
    branches: [main]
  pull_request:

# Needed for nx-set-shas when run on the main branch
permissions:
  actions: read
  contents: read

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.caching=true
  NODE_OPTIONS: --max_old_space_size=4096

jobs:
  main:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:27.3.1-dind
        options: --privileged --name docker
        env:
          DOCKER_TLS_CERTDIR: ""
        ports:
          - 2375:2375
    env:
      # Docker configuration for Testcontainers
      DOCKER_HOST: tcp://localhost:2375
      DOCKER_TLS_CERTDIR: ""
      TESTCONTAINERS_RYUK_DISABLED: "true"
      TESTCONTAINERS_HOST_OVERRIDE: "localhost"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            docs/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json', 'docs/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Install docs dependencies
        run: npm ci
        working-directory: docs

      # Derive appropriate SHAs for nx affected commands
      - uses: nrwl/nx-set-shas@v4

      # Optional: Connect to Nx Cloud for distributed task execution
      # Uncomment the following line to enable distributed execution
      # - run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="e2e-ci"

      # Run formatting check
      - name: Check formatting
        run: npx nx-cloud record -- nx format:check

      # Run affected linting, testing, and building
      - name: Run affected lint, test, and build
        run: npx nx affected -t lint test build

      # Run Kotlin/Gradle formatting check for affected backend projects
      - name: Run affected Kotlin formatting checks
        run: npx nx affected -t spotlessCheck

      # Upload artifacts only if we built something
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts
          path: |
            **/build/libs/*.jar
            **/dist/
          retention-days: 30

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/build/test-results/test/*.xml
            **/test-results.xml
            **/build/reports/
          retention-days: 7
