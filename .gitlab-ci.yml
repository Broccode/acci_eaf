stages:
  - setup
  - lint
  - build
  - test
  - artifact

variables:
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.caching=true'
  GRADLE_USER_HOME: '$CI_PROJECT_DIR/.gradle'
  NODE_OPTIONS: '--max_old_space_size=4096'
  # Docker-in-Docker configuration for Testcontainers
  # Use TLS-disabled configuration for better compatibility
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  # Testcontainers configuration
  TESTCONTAINERS_RYUK_DISABLED: "true"
  # Additional Testcontainers settings for GitLab CI
  TESTCONTAINERS_HOST_OVERRIDE: "localhost"

cache:
  key:
    files:
      - gradle/wrapper/gradle-wrapper.properties
      - package-lock.json
  paths:
    - .gradle/
    - node_modules/
    - .nx/cache/

.setup_java_node: &setup_java_node
  image: eclipse-temurin:21-jdk
  before_script:
    # Install git (required for Nx affected commands)
    - apt-get update && apt-get install -y git
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    # Verify installations
    - java -version
    - node --version
    - npm --version
    - git --version
    # Install dependencies
    - npm ci
    # Clear Nx cache for clean runs
    - npx nx reset
    # Make gradlew executable
    - chmod +x ./gradlew

.setup_java_node_docker: &setup_java_node_docker
  image: eclipse-temurin:21-jdk
  services:
    - name: docker:27.3.1-dind
      alias: docker
      command: ["--tls=false"]
  variables:
    # Override global Docker variables for this job
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    # Install essential packages
    - apt-get update && apt-get install -y git ca-certificates curl gnupg
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    # Install Docker CLI
    - install -m 0755 -d /etc/apt/keyrings
    - curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
    - chmod a+r /etc/apt/keyrings/docker.asc
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update && apt-get install -y docker-ce-cli
    # Wait for Docker daemon to be ready
    - echo "Waiting for Docker daemon to be ready..."
    - timeout 30 sh -c 'until docker info >/dev/null 2>&1; do sleep 1; done'
    # Verify Docker is working
    - docker version
    - docker info
    # Test Docker functionality
    - docker run --rm hello-world
    # Verify installations
    - java -version
    - node --version
    - npm --version
    - git --version
    - docker --version
    # Install dependencies
    - npm ci
    # Clear Nx cache for clean runs
    - npx nx reset
    # Make gradlew executable
    - chmod +x ./gradlew

setup:
  <<: *setup_java_node
  stage: setup
  script:
    - echo "Setup completed"

lint_backend:
  <<: *setup_java_node
  stage: lint
  script:
    - echo "Running Kotlin/Gradle formatting checks..."
    - ./gradlew spotlessCheck
  allow_failure: false

lint_frontend:
  <<: *setup_java_node
  stage: lint
  script:
    - echo "Running frontend linting and formatting checks..."
    - npx nx run-many --target=lint --all
    - npx nx run-many --target=format:check --all
  allow_failure: false

build:
  <<: *setup_java_node_docker
  stage: build
  script:
    - echo "Installing docs dependencies..."
    - cd docs && npm ci && cd ..
    - echo "Building backend projects..."
    - ./gradlew build -x test
    - echo "Building frontend projects..."
    - npx nx build ui-foundation-kit
    - npx nx build docs
  artifacts:
    paths:
      - 'apps/iam-service/build/libs/*.jar'
      - 'libs/eaf-core/build/libs/*.jar'
    expire_in: 1 day

test:
  <<: *setup_java_node_docker
  stage: test
  script:
    - echo "Installing docs dependencies..."
    - cd docs && npm ci && cd ..
    - echo "Running backend tests..."
    - ./gradlew test
    - echo "Running frontend tests..."
    - npx nx test ui-foundation-kit
    - npx nx test docs
  artifacts:
    reports:
      junit:
        - '**/build/test-results/test/*.xml'
        - '**/test-results.xml'
    paths:
      - '**/build/reports/'
    expire_in: 1 week

archive_artifacts:
  <<: *setup_java_node
  stage: artifact
  needs:
    - build
  script:
    - echo "Archiving build artifacts..."
    - find . -name "*.jar" -type f
    - find . -name "dist" -type d
  artifacts:
    paths:
      - 'apps/iam-service/build/libs/*.jar'
      - 'libs/eaf-core/build/libs/*.jar'
    expire_in: 4 weeks
  only:
    - main
