stages:
  - setup
  - lint
  - build
  - test
  - artifact

variables:
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.caching=true'
  GRADLE_USER_HOME: '$CI_PROJECT_DIR/.gradle'
  NODE_OPTIONS: '--max_old_space_size=4096'

cache:
  key:
    files:
      - gradle/wrapper/gradle-wrapper.properties
      - package-lock.json
  paths:
    - .gradle/
    - node_modules/
    - .nx/cache/

.setup_java_node: &setup_java_node
  image: eclipse-temurin:21-jdk
  before_script:
    # Configure DNS and update package lists with retries
    - echo "nameserver 8.8.8.8" > /etc/resolv.conf
    - echo "nameserver 1.1.1.1" >> /etc/resolv.conf
    - for i in 1 2 3; do apt-get update && break || sleep 5; done
    # Install essential packages with error handling
    - apt-get install -y --no-install-recommends ca-certificates curl gnupg git
    # Install Node.js with official repository
    - curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
    - echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" > /etc/apt/sources.list.d/nodesource.list
    - apt-get update && apt-get install -y nodejs
    # Verify installations
    - java -version
    - node --version
    - npm --version
    - git --version
    # Install dependencies
    - npm ci
    # Make gradlew executable
    - chmod +x ./gradlew

setup:
  <<: *setup_java_node
  stage: setup
  script:
    - echo "Setup completed"

lint_backend:
  <<: *setup_java_node
  stage: lint
  script:
    - echo "Running Kotlin/Gradle formatting checks..."
    - ./gradlew spotlessCheck
  allow_failure: false

lint_frontend:
  <<: *setup_java_node
  stage: lint
  script:
    - echo "Running frontend linting and formatting checks..."
    - npx nx run-many --target=lint --all
    - npx nx run-many --target=format:check --all
  allow_failure: false

build:
  <<: *setup_java_node
  stage: build
  script:
    - echo "Building all projects..."
    - npx nx run-many --target=build --all
  artifacts:
    paths:
      - '**/build/libs/*.jar'
      - '**/dist/'
    expire_in: 1 day

test:
  <<: *setup_java_node
  stage: test
  script:
    - echo "Running tests for all projects..."
    - npx nx run-many --target=test --all
  artifacts:
    reports:
      junit:
        - '**/build/test-results/test/*.xml'
        - '**/test-results.xml'
    paths:
      - '**/build/reports/'
    expire_in: 1 week

archive_artifacts:
  <<: *setup_java_node
  stage: artifact
  needs:
    - build
  script:
    - echo "Archiving build artifacts..."
    - find . -name "*.jar" -type f
    - find . -name "dist" -type d
  artifacts:
    paths:
      - '**/build/libs/*.jar'
      - '**/dist/'
    expire_in: 4 weeks
  only:
    - main
