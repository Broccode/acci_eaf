stages:
  - setup
  - lint
  - build
  - test
  - artifact
  - deploy

image: eclipse-temurin:21-jdk

variables:
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.caching=true'
  GRADLE_USER_HOME: '$CI_PROJECT_DIR/.gradle'
  NODE_OPTIONS: '--max_old_space_size=4096'
  GIT_DEPTH: 0
  # Docker-in-Docker configuration for Testcontainers
  # Use TLS-disabled configuration for better compatibility
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  # Testcontainers configuration
  TESTCONTAINERS_RYUK_DISABLED: "true"
  # Additional Testcontainers settings for GitLab CI
  TESTCONTAINERS_HOST_OVERRIDE: "localhost"

cache:
  - key:
      files:
        - package-lock.json
        - docs/package-lock.json
    paths:
      - node_modules/
      - docs/node_modules/
      - .npm/
  - key:
      files:
        - gradle/wrapper/gradle-wrapper.properties
    paths:
      - .gradle/
  - key: nx-cache
    paths:
      - .nx/cache/

.setup_environment: &setup_environment
  environment:
    name: ci
  before_script:
    # Install git and curl (required for Nx affected commands and Node.js)
    - apt-get update && apt-get install -y git ca-certificates curl gnupg
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    # Verify installations
    - java -version
    - node --version
    - npm --version
    - git --version
    # Install dependencies
    - npm ci --cache .npm --prefer-offline
    - cd docs && npm ci && cd ..
    # Make gradlew executable
    - chmod +x ./gradlew

.setup_docker: &setup_docker
  services:
    - name: docker:27.3.1-dind
      alias: docker
      command: ["--tls=false"]
  before_script:
    # Install git and essential packages
    - apt-get update && apt-get install -y git ca-certificates curl gnupg lsb-release
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    # Install Docker CLI - detect OS and use appropriate repository
    - install -m 0755 -d /etc/apt/keyrings
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    - chmod a+r /etc/apt/keyrings/docker.asc
    # Use Ubuntu repository since the base image is Ubuntu-based
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update && apt-get install -y docker-ce-cli
    # Wait for Docker daemon to be ready
    - timeout 30 sh -c 'until docker info >/dev/null 2>&1; do sleep 1; done'
    - docker version
    # Verify installations
    - java -version
    - node --version
    - npm --version
    - git --version
    - docker --version
    # Install dependencies
    - npm ci --cache .npm --prefer-offline
    - cd docs && npm ci && cd ..
    # Make gradlew executable
    - chmod +x ./gradlew

main:
  <<: *setup_docker
  interruptible: true
  only:
    - main
    - merge_requests
  script:
    # Set up Nx affected command variables
    - NX_HEAD=$CI_COMMIT_SHA
    - NX_BASE=${CI_MERGE_REQUEST_DIFF_BASE_SHA:-$CI_COMMIT_BEFORE_SHA}
    - echo "Running affected commands from $NX_BASE to $NX_HEAD"

    # Optional: Connect to Nx Cloud for distributed task execution
    # Uncomment the following line to enable distributed execution
    # - npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="e2e-ci"

    # Run formatting check
    - npx nx-cloud record -- nx format:check --base=$NX_BASE --head=$NX_HEAD

    # Run affected linting, testing, and building
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t lint test build

    # Run Kotlin/Gradle formatting check for affected backend projects
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t spotlessCheck

  artifacts:
    when: always
    reports:
      junit:
        - '**/build/test-results/test/*.xml'
        - '**/test-results.xml'
    paths:
      - '**/build/libs/*.jar'
      - '**/dist/'
      - '**/build/reports/'
    expire_in: 1 week

# Separate job for main branch deployments
deploy:
  <<: *setup_environment
  stage: deploy
  only:
    - main
  needs:
    - main
  script:
    - echo "Deploying artifacts from main branch..."
    - find . -name "*.jar" -type f
    - find . -name "dist" -type d
  artifacts:
    paths:
      - '**/build/libs/*.jar'
      - '**/dist/'
    expire_in: 4 weeks
