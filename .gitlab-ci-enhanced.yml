stages:
  - setup
  - lint
  - build
  - test
  - artifact
  - deploy

image: eclipse-temurin:21-jdk

variables:
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.caching=true -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=1g"'
  GRADLE_USER_HOME: '$CI_PROJECT_DIR/.gradle'
  NODE_OPTIONS: '--max_old_space_size=4096'
  GIT_DEPTH: 0
  DOCKER_DRIVER: overlay2
  TESTCONTAINERS_RYUK_DISABLED: 'true'
  TESTCONTAINERS_HOST_OVERRIDE: 'localhost'

# Enhanced caching strategy
cache:
  - key:
      files:
        - package-lock.json
        - docs/package-lock.json
    paths:
      - node_modules/
      - docs/node_modules/
      - .npm/
    policy: pull-push
  - key:
      files:
        - gradle/wrapper/gradle-wrapper.properties
        - '**/*.gradle*'
    paths:
      - .gradle/
      - ~/.gradle/caches
      - ~/.gradle/wrapper
    policy: pull-push
  - key: nx-cache-$CI_COMMIT_REF_SLUG-v2
    paths:
      - .nx/cache/
    policy: pull-push
  - key: nx-cache-v2
    paths:
      - .nx/cache/
    policy: pull

.setup_environment: &setup_environment
  environment:
    name: ci
  before_script:
    # System diagnostics
    - echo "üîç System Information:"
    - echo "Java version:" && java -version
    - echo "Available memory:" && free -h || echo "Memory info not available"
    - echo "Available disk:" && df -h
    # Install git and curl
    - apt-get update && apt-get install -y git ca-certificates curl gnupg
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    # Verify installations
    - echo "Node version:" && node --version
    - echo "NPM version:" && npm --version
    - echo "Git version:" && git --version
    # Install dependencies with better error handling
    - echo "üì¶ Installing dependencies..."
    - npm ci --cache .npm --prefer-offline || (echo "‚ùå npm ci failed, retrying..." && npm ci --cache .npm)
    - cd docs && npm ci && cd ..
    # Make gradlew executable and validate
    - chmod +x ./gradlew
    - echo "üîß Validating Gradle setup..."
    - ./gradlew --version
    - ./gradlew tasks --dry-run > /dev/null
    - echo "‚úÖ Gradle validation complete"

.setup_docker: &setup_docker
  before_script:
    # System diagnostics
    - echo "üîç System Information:"
    - echo "Java version:" && java -version
    - echo "Available memory:" && free -h || echo "Memory info not available"
    - echo "Available disk:" && df -h
    # Install git, curl, and Docker CLI
    - apt-get update && apt-get install -y git ca-certificates curl gnupg lsb-release
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update && apt-get install -y docker-ce-cli
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
    # Verify Docker and other installations
    - echo "üê≥ Docker info:" && docker info
    - echo "Node version:" && node --version
    - echo "NPM version:" && npm --version
    - echo "Git version:" && git --version
    - echo "Docker version:" && docker --version
    # Install dependencies with better error handling
    - echo "üì¶ Installing dependencies..."
    - npm ci --cache .npm --prefer-offline || (echo "‚ùå npm ci failed, retrying..." && npm ci --cache .npm)
    - cd docs && npm ci && cd ..
    # Make gradlew executable and validate
    - chmod +x ./gradlew
    - echo "üîß Validating Gradle setup..."
    - ./gradlew --version
    - ./gradlew tasks --dry-run > /dev/null
    - echo "‚úÖ Gradle validation complete"

# Enhanced main job with better error handling
main:
  <<: *setup_docker
  interruptible: true
  timeout: 60m
  only:
    - main
    - merge_requests
  script:
    # Set up Nx affected command variables
    - NX_HEAD=$CI_COMMIT_SHA
    - NX_BASE=${CI_MERGE_REQUEST_DIFF_BASE_SHA:-$CI_COMMIT_BEFORE_SHA}
    - echo "üîç Running affected commands from $NX_BASE to $NX_HEAD"
    # Run formatting check
    - echo "üìù Step 1: Format check..."
    - npx nx format:check --base=$NX_BASE --head=$NX_HEAD
    # Split tasks for better error isolation
    - echo "üîß Step 2: Affected linting..."
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t lint --parallel=3
    - echo "üß™ Step 3: Affected tests..."
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t test --parallel=2
    - echo "üèóÔ∏è  Step 4: Affected builds..."
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t build --parallel=2
    # Run Kotlin/Gradle formatting check
    - echo "üé® Step 5: Kotlin formatting check..."
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t spotlessCheck
  after_script:
    - |
      if [ "$CI_JOB_STATUS" = "failed" ]; then
        echo "üö® Job failed. Running diagnostics..."
        echo "üìã Recent Gradle logs:"
        find ~/.gradle -name "*.log" -mtime -1 -exec tail -20 {} \; 2>/dev/null || echo "No recent Gradle logs found"
        echo "üíæ Disk usage:"
        df -h
        echo "üß† Memory usage:"
        free -h
        echo "‚ùå Checking for specific error patterns..."
        if find . -name "*.log" -exec grep -l "OutOfMemoryError\|CompilationException\|KotlinCompilerException" {} \; | head -5; then
          echo "Found potential memory or compilation issues"
        fi
        echo "üí° Troubleshooting tips:"
        echo "1. Check the job logs for specific errors"
        echo "2. Download artifacts for detailed analysis"
        echo "3. Try running './scripts/gitlab-ci-debug.sh' locally to reproduce"
        echo "4. Consider reducing parallelism if memory issues persist"
      fi
  artifacts:
    when: always
    reports:
      junit:
        - '**/build/test-results/test/*.xml'
        - '**/test-results.xml'
    paths:
      - '**/build/libs/*.jar'
      - '**/dist/'
      - '**/build/reports/'
      - '**/build/kotlin/compile*/cacheable/'
      - '~/.gradle/daemon/'
      - '~/.gradle/caches/*/daemon.log'
      - '**/hs_err_pid*.log'
    expire_in: 1 week

# Retry job for failed builds with cleanup
retry_main:
  <<: *setup_docker
  interruptible: true
  timeout: 60m
  only:
    - main
    - merge_requests
  when: on_failure
  needs:
    - main
  script:
    - echo "üßπ Performing comprehensive cleanup and retry..."
    # Stop all Gradle processes
    - ./gradlew --stop 2>/dev/null || true
    - pkill -f gradle 2>/dev/null || true
    # Clean Kotlin incremental compilation caches
    - find . -name "build" -type d -path "*/kotlin/compile*" -exec rm -rf {} + 2>/dev/null || true
    - find . -name "caches-jvm" -type d -exec rm -rf {} + 2>/dev/null || true
    - find . -name "*.kotlin_module" -delete 2>/dev/null || true
    # Clean Gradle daemon and build cache
    - rm -rf ~/.gradle/daemon/ ~/.gradle/caches/build-cache-* 2>/dev/null || true
    # Clean project-specific Kotlin compilation artifacts
    - find . -name "*.kotlin_builtins" -delete 2>/dev/null || true
    - find . -name "*.kotlin_metadata" -delete 2>/dev/null || true
    # Clear Nx cache
    - npx nx reset
    - echo "‚úÖ Cleanup complete. Retrying build..."
    # Set up Nx affected command variables
    - NX_HEAD=$CI_COMMIT_SHA
    - NX_BASE=${CI_MERGE_REQUEST_DIFF_BASE_SHA:-$CI_COMMIT_BEFORE_SHA}
    - echo "üîç Retrying affected commands from $NX_BASE to $NX_HEAD"
    # Retry with conservative settings
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t lint test build --skip-nx-cache --parallel=1
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t spotlessCheck
  artifacts:
    when: always
    reports:
      junit:
        - '**/build/test-results/test/*.xml'
        - '**/test-results.xml'
    paths:
      - '**/build/libs/*.jar'
      - '**/dist/'
      - '**/build/reports/'
    expire_in: 1 week

# Separate job for main branch deployments
deploy:
  <<: *setup_environment
  stage: deploy
  only:
    - main
  needs:
    - main
  script:
    - echo "üöÄ Deploying artifacts from main branch..."
    - echo "üì¶ Available JAR files:"
    - find . -name "*.jar" -type f
    - echo "üìÅ Available dist directories:"
    - find . -name "dist" -type d
    - echo "‚úÖ Deployment preparation complete"
  artifacts:
    paths:
      - '**/build/libs/*.jar'
      - '**/dist/'
    expire_in: 4 weeks
