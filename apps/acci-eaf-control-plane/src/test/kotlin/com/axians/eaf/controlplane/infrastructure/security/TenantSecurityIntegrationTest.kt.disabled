package com.axians.eaf.controlplane.infrastructure.security

// import com.axians.eaf.core.context.TenantContext // Class doesn't exist
import com.axians.eaf.controlplane.domain.exception.InsufficientPermissionException
import com.axians.eaf.controlplane.domain.model.tenant.TenantId
import com.axians.eaf.controlplane.domain.service.AuditService
import com.axians.eaf.controlplane.infrastructure.security.annotation.RequiresTenantAccess
import com.axians.eaf.controlplane.infrastructure.security.aspect.TenantSecurityAspect
import com.axians.eaf.controlplane.test.ControlPlaneTestcontainerConfiguration
import com.axians.eaf.controlplane.test.TestControlPlaneApplication
import com.axians.eaf.core.security.EafSecurityContextHolder
import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.test.runTest
import org.aspectj.lang.ProceedingJoinPoint
import org.aspectj.lang.reflect.MethodSignature
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.context.annotation.Import
import org.springframework.test.context.ActiveProfiles
import org.testcontainers.junit.jupiter.Testcontainers

/**
 * Integration tests for tenant security system.
 *
 * Tests the @RequiresTenantAccess annotation and TenantSecurityAspect to ensure proper multi-tenant
 * access control.
 */
@Disabled("Temporarily disabled - needs suspend function fixes")
@SpringBootTest(classes = [TestControlPlaneApplication::class])
@ActiveProfiles("test")
@Testcontainers
@Import(ControlPlaneTestcontainerConfiguration::class)
class TenantSecurityIntegrationTest {
    private lateinit var securityContextHolder: EafSecurityContextHolder
    private lateinit var auditService: AuditService
    private lateinit var tenantSecurityAspect: TenantSecurityAspect
    private lateinit var joinPoint: ProceedingJoinPoint
    private lateinit var methodSignature: MethodSignature

    @BeforeEach
    fun setUp() {
        securityContextHolder = mockk()
        auditService = mockk(relaxed = true)
        tenantSecurityAspect = TenantSecurityAspect(securityContextHolder, auditService)

        joinPoint = mockk()
        methodSignature = mockk()

        every { joinPoint.signature } returns methodSignature
        every { methodSignature.declaringTypeName } returns "TestService"
        every { methodSignature.name } returns "testMethod"
        every { methodSignature.parameterNames } returns arrayOf("tenantId", "otherParam")
        every { joinPoint.args } returns arrayOf("tenant-123", "otherValue")
    }

    @Test
    fun `should allow access when user has global admin role`() {
        // Given
        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns "tenant-456"
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns true
        every { joinPoint.proceed() } returns "success"

        val annotation = mockRequiresTenantAccessAnnotation()

        // When
        val result = runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then
        assertEquals("success", result)
        verify { joinPoint.proceed() }
    }

    @Test
    fun `should allow access when user accesses their own tenant`() {
        // Given
        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns "tenant-123"
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns false
        every { joinPoint.proceed() } returns "success"

        val annotation = mockRequiresTenantAccessAnnotation()

        // When
        val result = runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then
        assertEquals("success", result)
        verify { joinPoint.proceed() }
    }

    @Test
    fun `should deny access when user tries to access different tenant without global role`() {
        // Given
        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns "tenant-456"
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns false

        val annotation = mockRequiresTenantAccessAnnotation()

        // When & Then
        val exception =
                assertThrows<InsufficientPermissionException> {
                    runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }
                }

        assertNotNull(exception)
        assertEquals("tenant-456", exception.userTenantId)
        assertEquals("tenant-123", exception.requestedTenantId)
    }

    @Test
    fun `should allow access when no target tenant is specified`() {
        // Given
        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns "tenant-456"
        every { joinPoint.args } returns arrayOf("not-a-tenant-id", "otherValue")
        every { joinPoint.proceed() } returns "success"

        val annotation = mockRequiresTenantAccessAnnotation()

        // When
        val result = runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then
        assertEquals("success", result)
        verify { joinPoint.proceed() }
    }

    @Test
    fun `should extract tenant ID from DTO object`() {
        // Given - Mock a request DTO with tenantId field
        val requestDto = TestRequestDto("tenant-789")
        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns "tenant-789"
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns false
        every { joinPoint.args } returns arrayOf(requestDto, "otherValue")
        every { joinPoint.proceed() } returns "success"

        val annotation = mockRequiresTenantAccessAnnotation()

        // When
        val result = runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then
        assertEquals("success", result)
        verify { joinPoint.proceed() }
    }

    @Test
    fun `should audit access attempts when auditing is enabled`() {
        // Given
        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns "tenant-123"
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns false
        every { joinPoint.proceed() } returns "success"

        val annotation = mockRequiresTenantAccessAnnotation(auditAccess = true)

        // When
        runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then
        verify { auditService.logAdminAction(any(), any(), any(), any()) }
    }

    @Test
    fun `should not audit access attempts when auditing is disabled`() {
        // Given
        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns "tenant-123"
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns false
        every { joinPoint.proceed() } returns "success"

        val annotation = mockRequiresTenantAccessAnnotation(auditAccess = false)

        // When
        runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then
        verify(exactly = 0) { auditService.logAdminAction(any(), any(), any(), any()) }
    }

    @Test
    fun `should enforce tenant access through annotations`() = runTest {
        // Given
        val tenantId = TenantId.generate()
        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns tenantId.value
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns false
        every { joinPoint.args } returns arrayOf(tenantId.value, "test-operation")
        every { joinPoint.proceed() } returns "success"

        val annotation = mockRequiresTenantAccessAnnotation(auditAccess = true)

        // When
        val result = runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then
        assertEquals("success", result)
        verify { joinPoint.proceed() }
        // Verify audit was called since auditAccess = true
        verify { auditService.logAdminAction(any(), any(), any(), any()) }
    }

    @Test
    fun `should handle tenant isolation correctly`() = runTest {
        // Given - different tenant context
        val tenantId1 = TenantId.generate()
        val tenantId2 = TenantId.generate()

        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns tenantId1.value
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns false
        every { joinPoint.args } returns arrayOf(tenantId2.value, "test-operation")

        val annotation = mockRequiresTenantAccessAnnotation()

        // When & Then - Should throw exception when trying to access different tenant
        val exception =
                assertThrows<InsufficientPermissionException> {
                    runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }
                }

        assertNotNull(exception)
        assertEquals(tenantId1.value, exception.userTenantId)
        assertEquals(tenantId2.value, exception.requestedTenantId)
    }

    @Test
    fun `should validate tenant context propagation`() = runTest {
        // Given - Test that global admin can access any tenant
        val userTenantId = TenantId.generate()
        val targetTenantId = TenantId.generate()

        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns userTenantId.value
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns true
        every { joinPoint.args } returns arrayOf(targetTenantId.value, "test-operation")
        every { joinPoint.proceed() } returns "success"

        val annotation = mockRequiresTenantAccessAnnotation()

        // When
        val result = runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then - Global admin should be able to access different tenant
        assertEquals("success", result)
        verify { joinPoint.proceed() }
    }

    @Test
    fun `should handle context clearing properly`() = runTest {
        // Given - Test unauthenticated access
        every { securityContextHolder.isAuthenticated() } returns false
        every { securityContextHolder.getTenantIdOrNull() } returns null

        val annotation = mockRequiresTenantAccessAnnotation()

        // When
        val result = runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then - Should allow access when no authentication is required
        assertNotNull(result)
    }

    @Test
    fun `should validate multi-tenant audit entries`() = runTest {
        // Given - Test that audit is called for different tenant operations
        val tenant1 = TenantId.generate()
        val tenant2 = TenantId.generate()

        // First operation for tenant1
        every { securityContextHolder.isAuthenticated() } returns true
        every { securityContextHolder.getTenantIdOrNull() } returns tenant1.value
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns false
        every { joinPoint.args } returns arrayOf(tenant1.value, "operation1")
        every { joinPoint.proceed() } returns "success1"

        val annotation = mockRequiresTenantAccessAnnotation(auditAccess = true)

        // When
        runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then
        verify(exactly = 1) { auditService.logAdminAction(any(), any(), any(), any()) }

        // Second operation for tenant2 (as global admin)
        every { securityContextHolder.getTenantIdOrNull() } returns tenant1.value
        every { securityContextHolder.hasAnyRole("SUPER_ADMIN", "PLATFORM_ADMIN") } returns true
        every { joinPoint.args } returns arrayOf(tenant2.value, "operation2")
        every { joinPoint.proceed() } returns "success2"

        // When
        runBlocking { tenantSecurityAspect.enforceTenantAccess(joinPoint, annotation) }

        // Then - Audit should be called twice in total
        verify(exactly = 2) { auditService.logAdminAction(any(), any(), any(), any()) }
    }

    // Test annotations that demonstrate tenant access patterns
    @RequiresTenantAccess(tenantIdParamName = "tenantId")
    private suspend fun simulateControllerMethod(
            tenantId: String,
            operation: String,
    ): String = "Operation $operation completed for tenant $tenantId"

    private fun mockRequiresTenantAccessAnnotation(
            tenantIdParamName: String = "tenantId",
            allowGlobalAccess: Boolean = true,
            auditAccess: Boolean = true,
    ): RequiresTenantAccess {
        val mock = mockk<RequiresTenantAccess>()
        every { mock.tenantIdParamName } returns tenantIdParamName
        every { mock.allowGlobalAccess } returns allowGlobalAccess
        every { mock.auditAccess } returns auditAccess
        return mock
    }

    /** Test DTO class for testing tenant ID extraction from objects. */
    private data class TestRequestDto(
            val tenantId: String,
    )
}
