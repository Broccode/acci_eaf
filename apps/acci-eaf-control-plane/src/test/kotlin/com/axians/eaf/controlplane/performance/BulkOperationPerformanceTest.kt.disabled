package com.axians.eaf.controlplane.performance

import com.axians.eaf.controlplane.domain.service.TenantService
import com.axians.eaf.controlplane.domain.service.UserService
import com.axians.eaf.controlplane.test.TestControlPlaneApplication
import java.time.Duration
import java.time.Instant
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Timeout
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.ActiveProfiles
import org.springframework.transaction.annotation.Transactional

/**
 * Performance tests for bulk operations.
 *
 * Validates system performance under load conditions including bulk user creation, tenant
 * operations, and concurrent access patterns.
 */
@Disabled("Temporarily disabled - massive API mismatches need fixing")
@SpringBootTest(classes = [TestControlPlaneApplication::class])
@ActiveProfiles("test")
@Transactional
class BulkOperationPerformanceTest {
    @Autowired private lateinit var userService: UserService

    @Autowired private lateinit var tenantService: TenantService

    @Test
    @Timeout(30) // Maximum 30 seconds
    fun `should handle bulk tenant creation efficiently`() {
        // Given
        val tenantCount = 100
        val startTime = Instant.now()

        // When creating multiple tenants
        val tenants =
                (1..tenantCount).map { i ->
                    tenantService.createTenant(
                            com.axians.eaf.controlplane.application.dto.tenant.CreateTenantRequest(
                                    name = "Performance Test Tenant $i",
                            ),
                    )
                }

        val endTime = Instant.now()
        val duration = Duration.between(startTime, endTime)

        // Then verify performance and correctness
        assertEquals(tenantCount, tenants.size)
        assertTrue(
                duration.toSeconds() < 10,
                "Bulk tenant creation should complete within 10 seconds",
        )

        // Verify average creation time
        val averageTimeMs = duration.toMillis() / tenantCount
        assertTrue(averageTimeMs < 100, "Average tenant creation should be under 100ms")

        // Verify all tenants are unique
        val uniqueIds = tenants.map { it.id }.toSet()
        assertEquals(tenantCount, uniqueIds.size, "All tenants should have unique IDs")
    }

    @Test
    @Timeout(60) // Maximum 60 seconds
    fun `should handle bulk user creation efficiently`() {
        // Given
        val tenant =
                tenantService.createTenant(
                        com.axians.eaf.controlplane.application.dto.tenant.CreateTenantRequest(
                                name = "Bulk User Test Tenant",
                        ),
                )

        val userCount = 500
        val startTime = Instant.now()

        // When creating multiple users
        val users =
                (1..userCount).map { i ->
                    userService.createUser(
                            com.axians.eaf.controlplane.application.dto.user.CreateUserRequest(
                                    email = "performance.user.$i@test.com",
                                    firstName = "User",
                                    lastName = "$i",
                                    tenantId = tenant.id.value,
                            ),
                    )
                }

        val endTime = Instant.now()
        val duration = Duration.between(startTime, endTime)

        // Then verify performance and correctness
        assertEquals(userCount, users.size)
        assertTrue(
                duration.toSeconds() < 30,
                "Bulk user creation should complete within 30 seconds",
        )

        // Verify average creation time
        val averageTimeMs = duration.toMillis() / userCount
        assertTrue(averageTimeMs < 60, "Average user creation should be under 60ms")

        // Verify all users belong to the same tenant
        users.forEach { user -> assertEquals(tenant.id, user.tenantId) }

        // Verify all emails are unique
        val uniqueEmails = users.map { it.email }.toSet()
        assertEquals(userCount, uniqueEmails.size, "All users should have unique emails")
    }

    @Test
    @Timeout(45) // Maximum 45 seconds
    fun `should handle bulk user operations efficiently`() {
        // Given - setup tenant and users
        val tenant =
                tenantService.createTenant(
                        com.axians.eaf.controlplane.application.dto.tenant.CreateTenantRequest(
                                name = "Bulk Operations Test Tenant",
                        ),
                )

        val userCount = 200
        val users =
                (1..userCount).map { i ->
                    userService.createUser(
                            com.axians.eaf.controlplane.application.dto.user.CreateUserRequest(
                                    email = "bulk.ops.user.$i@test.com",
                                    firstName = "BulkUser",
                                    lastName = "$i",
                                    tenantId = tenant.id.value,
                            ),
                    )
                }

        // When performing bulk operations
        val startTime = Instant.now()

        // Test bulk retrieval
        val retrievedUsers = userService.getUsersByTenant(tenant.id.value)

        // Test bulk updates
        val updatedUsers =
                users.map { user ->
                    userService.updateUser(
                            user.id.value,
                            com.axians.eaf.controlplane.application.dto.user.UpdateUserRequest(
                                    firstName = "Updated${user.firstName}",
                                    lastName = "Updated${user.lastName}",
                            ),
                    )
                }

        // Test bulk status changes
        val deactivatedUsers =
                users.take(userCount / 2).map { user -> userService.deactivateUser(user.id.value) }

        val endTime = Instant.now()
        val duration = Duration.between(startTime, endTime)

        // Then verify performance and correctness
        assertEquals(userCount, retrievedUsers.size)
        assertEquals(userCount, updatedUsers.size)
        assertEquals(userCount / 2, deactivatedUsers.size)

        assertTrue(
                duration.toSeconds() < 30,
                "Bulk operations should complete within 30 seconds",
        )

        // Verify updates applied correctly
        updatedUsers.forEach { user ->
            assertTrue(user.firstName.startsWith("Updated"))
            assertTrue(user.lastName.startsWith("Updated"))
        }
    }

    @Test
    @Timeout(20) // Maximum 20 seconds
    fun `should handle concurrent tenant access efficiently`() {
        // Given
        val tenantCount = 10
        val usersPerTenant = 50

        // Create multiple tenants
        val tenants =
                (1..tenantCount).map { i ->
                    tenantService.createTenant(
                            com.axians.eaf.controlplane.application.dto.tenant.CreateTenantRequest(
                                    name = "Concurrent Test Tenant $i",
                            ),
                    )
                }

        val startTime = Instant.now()

        // When performing concurrent operations across tenants
        val allUsers =
                tenants.flatMap { tenant ->
                    (1..usersPerTenant).map { j ->
                        userService.createUser(
                                com.axians.eaf.controlplane.application.dto.user.CreateUserRequest(
                                        email =
                                                "concurrent.user.$j@tenant${tenant.name.split(
                                    " ",
                                ).last()}.com",
                                        firstName = "ConcurrentUser",
                                        lastName = "$j",
                                        tenantId = tenant.id.value,
                                ),
                        )
                    }
                }

        val endTime = Instant.now()
        val duration = Duration.between(startTime, endTime)

        // Then verify performance and correctness
        val expectedTotalUsers = tenantCount * usersPerTenant
        assertEquals(expectedTotalUsers, allUsers.size)

        assertTrue(
                duration.toSeconds() < 15,
                "Concurrent operations should complete within 15 seconds",
        )

        // Verify tenant isolation - each tenant should have exactly the expected number of
        // users
        tenants.forEach { tenant ->
            val tenantUsers = userService.getUsersByTenant(tenant.id.value)
            assertEquals(
                    usersPerTenant,
                    tenantUsers.size,
                    "Each tenant should have exactly $usersPerTenant users",
            )

            // Verify all users belong to the correct tenant
            tenantUsers.forEach { user -> assertEquals(tenant.id, user.tenantId) }
        }
    }

    @Test
    @Timeout(30) // Maximum 30 seconds
    fun `should handle large tenant queries efficiently`() {
        // Given - create a tenant with many users
        val tenant =
                tenantService.createTenant(
                        com.axians.eaf.controlplane.application.dto.tenant.CreateTenantRequest(
                                name = "Large Query Test Tenant",
                        ),
                )

        val userCount = 1000
        (1..userCount).forEach { i ->
            userService.createUser(
                    com.axians.eaf.controlplane.application.dto.user.CreateUserRequest(
                            email = "query.user.$i@test.com",
                            firstName = "QueryUser",
                            lastName = "$i",
                            tenantId = tenant.id.value,
                    ),
            )
        }

        // When performing multiple queries
        val startTime = Instant.now()

        val queryResults = (1..10).map { userService.getUsersByTenant(tenant.id.value) }

        val endTime = Instant.now()
        val duration = Duration.between(startTime, endTime)

        // Then verify performance
        assertTrue(
                duration.toSeconds() < 10,
                "Multiple large queries should complete within 10 seconds",
        )

        // Verify query consistency
        queryResults.forEach { result ->
            assertEquals(userCount, result.size, "Each query should return all users")
        }

        // Verify average query time
        val averageQueryTimeMs = duration.toMillis() / 10
        assertTrue(averageQueryTimeMs < 1000, "Average query time should be under 1 second")
    }

    @Test
    @Timeout(25) // Maximum 25 seconds
    fun `should demonstrate scalable multi-tenant performance`() {
        // Given - stress test with multiple tenants and operations
        val tenantCount = 20
        val operationsPerTenant = 25

        val startTime = Instant.now()

        // When performing mixed operations across multiple tenants
        val results =
                (1..tenantCount).map { tenantIndex ->
                    val tenant =
                            tenantService.createTenant(
                                    com.axians.eaf.controlplane.application.dto.tenant
                                            .CreateTenantRequest(
                                                    name = "Scalability Test Tenant $tenantIndex",
                                            ),
                            )

                    val users =
                            (1..operationsPerTenant).map { userIndex ->
                                userService.createUser(
                                        com.axians.eaf.controlplane.application.dto.user
                                                .CreateUserRequest(
                                                        email =
                                                                "scale.user.$userIndex@tenant$tenantIndex.com",
                                                        firstName = "ScaleUser",
                                                        lastName = "$userIndex",
                                                        tenantId = tenant.id.value,
                                                ),
                                )
                            }

                    // Perform additional operations per tenant
                    val retrievedUsers = userService.getUsersByTenant(tenant.id.value)
                    val updatedUser =
                            userService.updateUser(
                                    users.first().id.value,
                                    com.axians.eaf.controlplane.application.dto.user
                                            .UpdateUserRequest(
                                                    firstName = "UpdatedScaleUser",
                                                    lastName = "Updated",
                                            ),
                            )

                    Triple(tenant, users, retrievedUsers)
                }

        val endTime = Instant.now()
        val duration = Duration.between(startTime, endTime)

        // Then verify scalability performance
        assertTrue(
                duration.toSeconds() < 20,
                "Scalability test should complete within 20 seconds",
        )

        val totalOperations = tenantCount * (operationsPerTenant + 2) // +2 for retrieve and update
        val averageOperationTimeMs = duration.toMillis() / totalOperations
        assertTrue(
                averageOperationTimeMs < 100,
                "Average operation time should be under 100ms",
        )

        // Verify correctness
        assertEquals(tenantCount, results.size)
        results.forEach { (tenant, users, retrievedUsers) ->
            assertEquals(operationsPerTenant, users.size)
            assertEquals(operationsPerTenant, retrievedUsers.size)

            // Verify tenant isolation
            retrievedUsers.forEach { user -> assertEquals(tenant.id, user.tenantId) }
        }
    }

    @Test
    fun `should provide performance metrics and insights`() {
        // Given - baseline performance measurement
        val startTime = Instant.now()

        val tenant =
                tenantService.createTenant(
                        com.axians.eaf.controlplane.application.dto.tenant.CreateTenantRequest(
                                name = "Performance Metrics Test",
                        ),
                )

        val tenantCreationTime = Instant.now()

        val user =
                userService.createUser(
                        com.axians.eaf.controlplane.application.dto.user.CreateUserRequest(
                                email = "metrics@test.com",
                                firstName = "Metrics",
                                lastName = "User",
                                tenantId = tenant.id.value,
                        ),
                )

        val userCreationTime = Instant.now()

        val retrievedUser = userService.getUserById(user.id.value)
        val retrievalTime = Instant.now()

        // Then analyze performance metrics
        val tenantCreationDuration = Duration.between(startTime, tenantCreationTime)
        val userCreationDuration = Duration.between(tenantCreationTime, userCreationTime)
        val retrievalDuration = Duration.between(userCreationTime, retrievalTime)

        // Performance assertions
        assertTrue(
                tenantCreationDuration.toMillis() < 500,
                "Tenant creation should be under 500ms",
        )
        assertTrue(
                userCreationDuration.toMillis() < 300,
                "User creation should be under 300ms",
        )
        assertTrue(
                retrievalDuration.toMillis() < 100,
                "User retrieval should be under 100ms",
        )

        // Verify functional correctness
        assertEquals(tenant.id, user.tenantId)
        assertEquals(user.id, retrievedUser.id)
        assertEquals(user.email, retrievedUser.email)
    }
}
