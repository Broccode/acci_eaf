package com.axians.eaf.controlplane.infrastructure.security

import com.axians.eaf.controlplane.domain.exception.InsufficientPermissionException
import com.axians.eaf.controlplane.domain.exception.TenantIsolationViolationException
import com.axians.eaf.controlplane.domain.model.tenant.TenantId
import com.axians.eaf.controlplane.infrastructure.security.annotation.RateLimit
import com.axians.eaf.controlplane.infrastructure.security.annotation.RequiresRoles
import com.axians.eaf.controlplane.infrastructure.security.annotation.RequiresTenantAccess
import com.axians.eaf.controlplane.infrastructure.security.annotation.SecurityMonitoring
import com.axians.eaf.controlplane.test.TestControlPlaneApplication
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.security.test.context.support.WithMockUser
import org.springframework.test.context.ActiveProfiles

/**
 * Comprehensive security integration tests.
 *
 * Tests multi-tenant isolation, role-based access control, security monitoring, and threat
 * detection capabilities.
 */
@Disabled("Temporarily disabled - needs security annotation parameter fixes")
@SpringBootTest(classes = [TestControlPlaneApplication::class])
@ActiveProfiles("test")
class SecurityIntegrationTest {
    @Test
    @WithMockUser(username = "admin@tenant1.com", roles = ["TENANT_ADMIN"])
    fun `should enforce tenant isolation correctly`() {
        // Given
        val tenant1Id = TenantId.generate()
        val tenant2Id = TenantId.generate()

        // Test service with tenant access annotation
        val service = TestTenantService()

        // When accessing own tenant - should succeed
        val result1 = service.accessTenantData(tenant1Id.value, "admin@tenant1.com")
        assertEquals("Access granted for tenant: ${tenant1Id.value}", result1)

        // When accessing different tenant - should fail
        assertThrows<TenantIsolationViolationException> {
            service.accessTenantData(tenant2Id.value, "admin@tenant1.com")
        }
    }

    @Test
    @WithMockUser(username = "user@tenant1.com", roles = ["USER"])
    fun `should enforce role-based access control`() {
        // Given
        val service = TestSecurityService()

        // When user tries to access admin function - should fail
        assertThrows<InsufficientPermissionException> { service.adminOnlyFunction() }

        // When user accesses user function - should succeed
        val result = service.userFunction()
        assertEquals("User access granted", result)
    }

    @Test
    @WithMockUser(username = "admin@tenant1.com", roles = ["TENANT_ADMIN"])
    fun `should enforce role hierarchy correctly`() {
        // Given
        val service = TestSecurityService()

        // When admin accesses admin function - should succeed
        val adminResult = service.adminOnlyFunction()
        assertEquals("Admin access granted", adminResult)

        // When admin accesses user function - should succeed (role hierarchy)
        val userResult = service.userFunction()
        assertEquals("User access granted", userResult)
    }

    @Test
    @WithMockUser(username = "platform@system.com", roles = ["PLATFORM_ADMIN"])
    fun `should allow platform admin global access`() {
        // Given
        val service = TestTenantService()
        val tenant1Id = TenantId.generate()
        val tenant2Id = TenantId.generate()

        // When platform admin accesses any tenant - should succeed
        val result1 = service.accessTenantData(tenant1Id.value, "platform@system.com")
        assertEquals("Access granted for tenant: ${tenant1Id.value}", result1)

        val result2 = service.accessTenantData(tenant2Id.value, "platform@system.com")
        assertEquals("Access granted for tenant: ${tenant2Id.value}", result2)
    }

    @Test
    @WithMockUser(username = "user@tenant1.com", roles = ["USER"])
    fun `should enforce rate limiting`() {
        // Given
        val service = TestSecurityService()

        // When making multiple rapid requests - should eventually be rate limited
        var successCount = 0
        var rateLimitedCount = 0

        repeat(20) {
            try {
                service.rateLimitedFunction()
                successCount++
            } catch (e: Exception) {
                if (e.message?.contains("Rate limit exceeded") == true) {
                    rateLimitedCount++
                }
            }
        }

        // Should have some successful calls and some rate limited
        assertTrue(successCount > 0, "Should have some successful calls")
        assertTrue(rateLimitedCount > 0, "Should have some rate limited calls")
    }

    @Test
    @WithMockUser(username = "admin@tenant1.com", roles = ["TENANT_ADMIN"])
    fun `should monitor security events`() {
        // Given
        val service = TestSecurityService()

        // When performing monitored operation
        val result = service.monitoredFunction()

        // Should succeed and be monitored
        assertEquals("Monitored operation completed", result)

        // Security monitoring should log this operation
        // (In real implementation, this would check audit logs)
    }

    @Test
    fun `should detect suspicious activity patterns`() {
        // Given - simulate suspicious patterns
        val securityService = TestSecurityMonitoringService()

        // When detecting multiple failed login attempts
        repeat(5) { securityService.recordFailedLogin("suspicious@user.com") }

        // Then should detect suspicious activity
        val isSuspicious = securityService.isSuspiciousActivity("suspicious@user.com")
        assertTrue(isSuspicious, "Should detect suspicious activity after multiple failed logins")
    }

    @Test
    @WithMockUser(username = "user@tenant1.com", roles = ["USER"])
    fun `should validate tenant context propagation`() {
        // Given
        val service = TestTenantService()
        val tenantId = TenantId.generate()

        // When user accesses nested service operations
        val result = service.nestedTenantOperation(tenantId.value, "user@tenant1.com")

        // Should maintain tenant context throughout call chain
        assertNotNull(result)
        assertTrue(result.contains("Tenant context maintained"))
    }

    @Test
    @WithMockUser(username = "admin@tenant1.com", roles = ["TENANT_ADMIN"])
    fun `should enforce data classification security`() {
        // Given
        val service = TestSecurityService()

        // When accessing sensitive data
        val result = service.accessSensitiveData()

        // Should succeed for authorized user
        assertEquals("Sensitive data accessed", result)

        // Security monitoring should flag this as sensitive access
        // (In real implementation, this would be logged with high priority)
    }

    @Test
    fun `should validate security configuration`() {
        // Given - security properties should be properly configured
        val securityConfig = TestSecurityConfiguration()

        // When checking security settings
        val isSecurelyConfigured = securityConfig.validateConfiguration()

        // Should be properly configured for production
        assertTrue(isSecurelyConfigured, "Security should be properly configured")
    }

    /** Test service with tenant access control */
    class TestTenantService {
        @RequiresTenantAccess
        fun accessTenantData(
                tenantId: String,
                userId: String,
        ): String = "Access granted for tenant: $tenantId"

        @RequiresTenantAccess
        @SecurityMonitoring
        fun nestedTenantOperation(
                tenantId: String,
                userId: String,
        ): String = "Tenant context maintained for: $tenantId"
    }

    /** Test service with role-based access control */
    class TestSecurityService {
        @RequiresRoles("TENANT_ADMIN", "PLATFORM_ADMIN")
        fun adminOnlyFunction(): String = "Admin access granted"

        @RequiresRoles("USER", "TENANT_ADMIN", "PLATFORM_ADMIN")
        fun userFunction(): String = "User access granted"

        @RateLimit(maxRequests = 10, windowSeconds = 60)
        fun rateLimitedFunction(): String = "Rate limited operation completed"

        @SecurityMonitoring(level = "HIGH")
        fun monitoredFunction(): String = "Monitored operation completed"

        @RequiresRoles("TENANT_ADMIN", "PLATFORM_ADMIN")
        @SecurityMonitoring(level = "CRITICAL", sensitiveData = true)
        fun accessSensitiveData(): String = "Sensitive data accessed"
    }

    /** Test security monitoring service */
    class TestSecurityMonitoringService {
        private val failedLoginAttempts = mutableMapOf<String, Int>()

        fun recordFailedLogin(email: String) {
            failedLoginAttempts[email] = (failedLoginAttempts[email] ?: 0) + 1
        }

        fun isSuspiciousActivity(email: String): Boolean = (failedLoginAttempts[email] ?: 0) >= 5
    }

    /** Test security configuration */
    class TestSecurityConfiguration {
        fun validateConfiguration(): Boolean {
            // Simulate validation of security configuration
            return true
        }
    }
}
